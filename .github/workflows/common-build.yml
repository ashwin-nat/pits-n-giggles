name: Build App for macOS and Windows

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    env:
      POETRY_VERSION: 2.1.2  # Pin for reproducibility

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
            python -m pip install --upgrade pip
            curl -sSL https://install.python-poetry.org | python -
            if [ "$RUNNER_OS" = "Windows" ]; then
            echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH
            else
            echo "$HOME/.local/bin" >> $GITHUB_PATH
            fi
        shell: bash


      - name: Install dependencies
        run: |
          poetry install --no-root --without dev
        shell: bash

      - name: Build with PyInstaller
        run: |
          poetry run python scripts/build.py
        shell: bash

      - name: Set artifact name
        id: get-artifact-name
        run: |
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            FILE=$(find dist -name "*.app" | head -n 1)
          else
            FILE=$(find dist -name "*.exe" | head -n 1)
          fi
          NAME=$(basename "$FILE")
          NAME_NO_EXT="${NAME%.*}"
          echo "artifact_name=$NAME_NO_EXT" >> $GITHUB_OUTPUT
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get-artifact-name.outputs.artifact_name }}-${{ matrix.os }}
          path: |
            dist/*.app
            dist/*.exe
      - name: Run Smoke Test
        run: |
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            APP_PATH=$(find dist -name "*.app" | head -n 1)
            TEST_FILE="$HOME/Library/Application Support/pits_n_giggles/png_smoke_test.txt"
            # Launch app in smoke test mode with dummy content
            open -W "$APP_PATH" --args --smoke-test "hello-smoke"
            # Verify the file was created
            if [ ! -f "$TEST_FILE" ]; then
              echo "Smoke test failed: $TEST_FILE not found"
              exit 1
            fi
          else
            EXE_PATH=$(find dist -name "*.exe" | head -n 1)
            TEST_FILE="./png_smoke_test.txt"
            # Launch app in smoke test mode with dummy content
            "$EXE_PATH" --smoke-test "hello-smoke"
            # Wait for file creation with polling (timeout: 10s)
            TIMEOUT=10
            INTERVAL=0.5
            ELAPSED=0
            while [ ! -f "$TEST_FILE" ] && [ "$(echo "$ELAPSED < $TIMEOUT" | bc)" -eq 1 ]; do
              sleep $INTERVAL
              ELAPSED=$(echo "$ELAPSED + $INTERVAL" | bc)
            done
            if [ ! -f "$TEST_FILE" ]; then
              echo "Smoke test failed: $TEST_FILE not found after $TIMEOUT seconds"
              exit 1
            fi
          fi
          echo "Smoke test passed!"
        shell: bash
