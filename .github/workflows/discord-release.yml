name: Notify Discord of New Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag'
        required: true
      release_notes:
        description: 'Release notes (in Markdown)'
        required: true

jobs:
  discord:
    runs-on: ubuntu-latest

    steps:
      - name: Extract release data
        id: extract
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "TAG_NAME=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
            echo "RAW_BODY<<EOF" >> $GITHUB_ENV
            echo "${{ github.event.inputs.release_notes }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "TAG_NAME=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
            echo "RAW_BODY<<EOF" >> $GITHUB_ENV
            echo "${{ github.event.release.body }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - name: Format release notes for Discord
        id: format
        run: |
          FORMATTED=$(echo "$RAW_BODY" | sed -E '
            s/^### (.*)$/**\1**/;
            s/^## (.*)$/__\1__/;
            s/\*\*(BREAKING CHANGE|NOTE|FIX|FEATURE)\*\*/ðŸ›‘ \1:/Ig;
            s/^- /* /;
            s/`([^`]*)`/`\1`/g;
            s/\[([^\]]+)\]\(([^)]+)\)/\1: \2/g;
            s/!\[.*\]\(([^)]+)\)/\1/g;
            s/```[^`]*```/(code block omitted)/g;
          ' | head -c 4000)

          echo "DISCORD_BODY<<EOF" >> $GITHUB_ENV
          echo "$FORMATTED" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Post to Discord
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d "$(jq -n --arg content "ðŸ“¦ New Release: $TAG_NAME\n\n$DISCORD_BODY" '{content: $content}')" \
          "$DISCORD_WEBHOOK"
